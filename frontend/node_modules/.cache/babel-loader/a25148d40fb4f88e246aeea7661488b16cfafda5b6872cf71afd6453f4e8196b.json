{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import io from 'socket.io-client';\n// import './App.css';\n\n// const socket = io('http://localhost:4000');\n\n// function App() {\n//   const [username, setUsername] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [room, setRoom] = useState('');\n//   const [joined, setJoined] = useState(false);\n\n//   useEffect(() => {\n//     socket.on('chat history', (history) => {\n//       console.log('Chat history:', history); // Debug log\n//       setMessages(history);\n//     });\n\n//     socket.on('chat message', ({ username, message }) => {\n//       console.log('Received message:', { username, message }); // Debug log\n//       setMessages((prevMessages) => [...prevMessages, { username, message }]);\n//     });\n\n//     return () => {\n//       socket.off('chat history');\n//       socket.off('chat message');\n//     };\n//   }, []);\n\n//   const joinRoom = (e) => {\n//     e.preventDefault();\n//     if (room.trim() && username.trim()) {\n//       console.log(`Joining room: ${room} as ${username}`); // Debug log\n//       socket.emit('join room', { room, username });\n//       setJoined(true);\n//     }\n//   };\n\n//   const sendMessage = (e) => {\n//     e.preventDefault();\n//     if (message.trim()) {\n//       console.log('Sending message:', message); // Debug log\n//       socket.emit('chat message', { room, message });\n//       setMessage('');\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {!joined ? (\n//           <form onSubmit={joinRoom}>\n//             <input\n//               type=\"text\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//               placeholder=\"Enter your name\"\n//               required\n//             />\n//             <input\n//               type=\"text\"\n//               value={room}\n//               onChange={(e) => setRoom(e.target.value)}\n//               placeholder=\"Enter room name\"\n//               required\n//             />\n//             <button type=\"submit\">Join Room</button>\n//           </form>\n//         ) : (\n//           <>\n//             <h1>Chat Room: {room}</h1>\n//             <div className=\"chat-box\">\n//               {messages.map((msg, index) => (\n//                 <div key={index} className=\"chat-message\">\n//                   <strong>{msg.username}:</strong> {msg.message}\n//                 </div>\n//               ))}\n//             </div>\n//             <form onSubmit={sendMessage}>\n//               <input\n//                 type=\"text\"\n//                 value={message}\n//                 onChange={(e) => setMessage(e.target.value)}\n//                 placeholder=\"Type your message...\"\n//                 required\n//               />\n//               <button type=\"submit\">Send</button>\n//             </form>\n//           </>\n//         )}\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\nconst chatHistory = {}; // Store chat history for each room\n\nio.on('connection', socket => {\n  console.log('A user connected:', socket.id);\n  socket.on('join room', ({\n    room,\n    username\n  }) => {\n    socket.join(room);\n    socket.username = username; // Store the username in the socket object\n    console.log(`User ${username} joined room ${room}`);\n\n    // Send chat history to the user\n    if (chatHistory[room]) {\n      socket.emit('chat history', chatHistory[room]);\n    } else {\n      chatHistory[room] = []; // Initialize chat history for the room if not exists\n    }\n  });\n  socket.on('chat message', ({\n    room,\n    message\n  }) => {\n    const msg = {\n      id: socket.id + Date.now(),\n      username: socket.username,\n      message\n    };\n    console.log(`Message received in room ${room} from ${socket.username}: ${message}`); // Debug log\n\n    // Save the message to chat history\n    chatHistory[room].push(msg);\n\n    // Broadcast the message to the room\n    io.to(room).emit('chat message', msg);\n  });\n  socket.on('delete message', ({\n    room,\n    id\n  }) => {\n    console.log(`Delete message ${id} from room ${room}`);\n    chatHistory[room] = chatHistory[room].filter(msg => msg.id !== id);\n    io.to(room).emit('delete message', id);\n  });\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n});\nconst PORT = process.env.PORT || 4000;\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","http","socketIo","app","server","createServer","io","cors","origin","methods","chatHistory","on","socket","console","log","id","room","username","join","emit","message","msg","Date","now","push","to","filter","PORT","process","env","listen"],"sources":["C:/Users/DELL USER/Desktop/project/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import io from 'socket.io-client';\n// import './App.css';\n\n// const socket = io('http://localhost:4000');\n\n// function App() {\n//   const [username, setUsername] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [room, setRoom] = useState('');\n//   const [joined, setJoined] = useState(false);\n\n//   useEffect(() => {\n//     socket.on('chat history', (history) => {\n//       console.log('Chat history:', history); // Debug log\n//       setMessages(history);\n//     });\n\n//     socket.on('chat message', ({ username, message }) => {\n//       console.log('Received message:', { username, message }); // Debug log\n//       setMessages((prevMessages) => [...prevMessages, { username, message }]);\n//     });\n\n//     return () => {\n//       socket.off('chat history');\n//       socket.off('chat message');\n//     };\n//   }, []);\n\n//   const joinRoom = (e) => {\n//     e.preventDefault();\n//     if (room.trim() && username.trim()) {\n//       console.log(`Joining room: ${room} as ${username}`); // Debug log\n//       socket.emit('join room', { room, username });\n//       setJoined(true);\n//     }\n//   };\n\n//   const sendMessage = (e) => {\n//     e.preventDefault();\n//     if (message.trim()) {\n//       console.log('Sending message:', message); // Debug log\n//       socket.emit('chat message', { room, message });\n//       setMessage('');\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {!joined ? (\n//           <form onSubmit={joinRoom}>\n//             <input\n//               type=\"text\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//               placeholder=\"Enter your name\"\n//               required\n//             />\n//             <input\n//               type=\"text\"\n//               value={room}\n//               onChange={(e) => setRoom(e.target.value)}\n//               placeholder=\"Enter room name\"\n//               required\n//             />\n//             <button type=\"submit\">Join Room</button>\n//           </form>\n//         ) : (\n//           <>\n//             <h1>Chat Room: {room}</h1>\n//             <div className=\"chat-box\">\n//               {messages.map((msg, index) => (\n//                 <div key={index} className=\"chat-message\">\n//                   <strong>{msg.username}:</strong> {msg.message}\n//                 </div>\n//               ))}\n//             </div>\n//             <form onSubmit={sendMessage}>\n//               <input\n//                 type=\"text\"\n//                 value={message}\n//                 onChange={(e) => setMessage(e.target.value)}\n//                 placeholder=\"Type your message...\"\n//                 required\n//               />\n//               <button type=\"submit\">Send</button>\n//             </form>\n//           </>\n//         )}\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n    cors: {\n        origin: \"http://localhost:3000\",\n        methods: [\"GET\", \"POST\"]\n    }\n});\n\nconst chatHistory = {};  // Store chat history for each room\n\nio.on('connection', (socket) => {\n    console.log('A user connected:', socket.id);\n\n    socket.on('join room', ({ room, username }) => {\n        socket.join(room);\n        socket.username = username;  // Store the username in the socket object\n        console.log(`User ${username} joined room ${room}`);\n\n        // Send chat history to the user\n        if (chatHistory[room]) {\n            socket.emit('chat history', chatHistory[room]);\n        } else {\n            chatHistory[room] = [];  // Initialize chat history for the room if not exists\n        }\n    });\n\n    socket.on('chat message', ({ room, message }) => {\n        const msg = { id: socket.id + Date.now(), username: socket.username, message };\n        console.log(`Message received in room ${room} from ${socket.username}: ${message}`); // Debug log\n\n        // Save the message to chat history\n        chatHistory[room].push(msg);\n\n        // Broadcast the message to the room\n        io.to(room).emit('chat message', msg);\n    });\n\n    socket.on('delete message', ({ room, id }) => {\n        console.log(`Delete message ${id} from room ${room}`);\n        chatHistory[room] = chatHistory[room].filter(msg => msg.id !== id);\n        io.to(room).emit('delete message', id);\n    });\n\n    socket.on('disconnect', () => {\n        console.log('User disconnected');\n    });\n});\n\nconst PORT = process.env.PORT || 4000;\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}